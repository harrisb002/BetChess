{"ast":null,"code":"import { PieceType } from \"../Types\";\nimport { Piece } from \"./Piece\";\nexport class Pawn extends Piece {\n  // This is nullable\n  constructor(position, hasMoved, side, enPassant, possibleMoves = []) {\n    super(position, PieceType.PAWN, hasMoved, side, possibleMoves); // Initialize the base class 'Piece'\n    this.enPassant = void 0;\n    this.enPassant = enPassant;\n  }\n  clone() {\n    return new Pawn(this.position.clone(), this.hasMoved, this.side, this.enPassant, this.possibleMoves);\n  }\n}","map":{"version":3,"names":["PieceType","Piece","Pawn","constructor","position","hasMoved","side","enPassant","possibleMoves","PAWN","clone"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/models/Pawn.ts"],"sourcesContent":["import { PieceType, Side } from \"../Types\";\nimport { Piece } from \"./Piece\";\nimport { Position } from \"./Position\";\n\nexport class Pawn extends Piece {\n    enPassant?: boolean; // This is nullable\n    constructor(position: Position, hasMoved: boolean, side: Side, enPassant?: boolean, possibleMoves: Position[] = []) {\n        super(position, PieceType.PAWN, hasMoved, side, possibleMoves) // Initialize the base class 'Piece'\n        this.enPassant = enPassant;\n        \n    }\n\n    clone() : Pawn {\n        return new Pawn(this.position.clone(), this.hasMoved, this.side, this.enPassant, this.possibleMoves)\n    }\n}"],"mappings":"AAAA,SAASA,SAAS,QAAc,UAAU;AAC1C,SAASC,KAAK,QAAQ,SAAS;AAG/B,OAAO,MAAMC,IAAI,SAASD,KAAK,CAAC;EACP;EACrBE,WAAWA,CAACC,QAAkB,EAAEC,QAAiB,EAAEC,IAAU,EAAEC,SAAmB,EAAEC,aAAyB,GAAG,EAAE,EAAE;IAChH,KAAK,CAACJ,QAAQ,EAAEJ,SAAS,CAACS,IAAI,EAAEJ,QAAQ,EAAEC,IAAI,EAAEE,aAAa,CAAC,EAAC;IAAA,KAFnED,SAAS;IAGL,IAAI,CAACA,SAAS,GAAGA,SAAS;EAE9B;EAEAG,KAAKA,CAAA,EAAU;IACX,OAAO,IAAIR,IAAI,CAAC,IAAI,CAACE,QAAQ,CAACM,KAAK,CAAC,CAAC,EAAE,IAAI,CAACL,QAAQ,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,aAAa,CAAC;EACxG;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}