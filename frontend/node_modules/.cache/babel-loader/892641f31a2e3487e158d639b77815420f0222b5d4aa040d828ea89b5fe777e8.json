{"ast":null,"code":"import { ethers } from 'ethers';\nimport { Web3Provider } from '@ethersproject/providers';\nconst provider = new Web3Provider(window.ethereum);\nconst abi = [\"event AccountCreated(address owner, uint256 indexed accountId, uint256 timestamp)\", \"event Deposit(address indexed user, uint256 value, uint256 timestamp)\", \"event GameCreated(uint256 gameId, uint256 betAmount, address player1, address player2, uint256 timestamp)\", \"event GameResult(uint256 gameId, address winner, uint256 timestamp)\", \"function accountGames(uint256, uint256) view returns (uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)\", \"function accounts(uint256) view returns (address owner, uint256 balance)\", \"function approveBet(uint256 accountId, uint256 amount)\", \"function bet(uint256 accountId, uint256 amount)\", \"function createAccount(address newOwner)\", \"function deposit(uint256 accountId) payable\", \"function getAccounts() view returns ((address owner, uint256 balance)[])\", \"function getBalance(uint256 accountId) view returns (uint256)\", \"function getPreviousGames(uint256 accountId) view returns ((uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)[])\"];\n\n//Contract address\nconst address = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\n//Store the contract instance once gained access to metamask from client\nlet contract = null;\nasync function getProviderOrSigner(signer = false) {\n  // Requests access to the user's Ethereum account(s). This will prompt the user to connect their wallet.\n  await provider.send(\"eth_requestAccounts\", []);\n  // If a signer is requested, get a signer object from the provider; otherwise, return the provider itself.\n  return signer ? provider.getSigner() : provider;\n}\nexport async function getContract(signer = false) {\n  if (!contract) {\n    const providerOrSigner = await getProviderOrSigner(signer);\n    contract = new ethers.Contract(address, abi, providerOrSigner);\n  }\n  return contract;\n}\nexport async function createAccount(owner) {\n  const contractWithSigner = await getContract(true);\n  const tx = await contractWithSigner.createAccount(owner);\n  return tx.wait(); // Wait for transaction to be mined\n}\nexport async function getAccounts() {\n  const contract = await getContract();\n  return contract.getAccounts();\n}","map":{"version":3,"names":["ethers","Web3Provider","provider","window","ethereum","abi","address","contract","getProviderOrSigner","signer","send","getSigner","getContract","providerOrSigner","Contract","createAccount","owner","contractWithSigner","tx","wait","getAccounts"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/ethersService.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { Web3Provider } from '@ethersproject/providers';\nconst provider = new Web3Provider(window.ethereum);\n\nconst abi = [\n  \"event AccountCreated(address owner, uint256 indexed accountId, uint256 timestamp)\",\n  \"event Deposit(address indexed user, uint256 value, uint256 timestamp)\",\n  \"event GameCreated(uint256 gameId, uint256 betAmount, address player1, address player2, uint256 timestamp)\",\n  \"event GameResult(uint256 gameId, address winner, uint256 timestamp)\",\n  \"function accountGames(uint256, uint256) view returns (uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)\",\n  \"function accounts(uint256) view returns (address owner, uint256 balance)\",\n  \"function approveBet(uint256 accountId, uint256 amount)\",\n  \"function bet(uint256 accountId, uint256 amount)\",\n  \"function createAccount(address newOwner)\",\n  \"function deposit(uint256 accountId) payable\",\n  \"function getAccounts() view returns ((address owner, uint256 balance)[])\",\n  \"function getBalance(uint256 accountId) view returns (uint256)\",\n  \"function getPreviousGames(uint256 accountId) view returns ((uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)[])\"\n];\n\n//Contract address\nconst address = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\n//Store the contract instance once gained access to metamask from client\nlet contract = null;\n\nasync function getProviderOrSigner(signer = false) {\n  // Requests access to the user's Ethereum account(s). This will prompt the user to connect their wallet.\n  await provider.send(\"eth_requestAccounts\", []); \n    // If a signer is requested, get a signer object from the provider; otherwise, return the provider itself.\n  return signer ? provider.getSigner() : provider;\n}\n\nexport async function getContract(signer = false) {\n  if (!contract) {\n    const providerOrSigner = await getProviderOrSigner(signer);\n    contract = new ethers.Contract(address, abi, providerOrSigner);\n  }\n  return contract;\n}\n\nexport async function createAccount(owner) {\n  const contractWithSigner = await getContract(true);\n  const tx = await contractWithSigner.createAccount(owner);\n  return tx.wait(); // Wait for transaction to be mined\n}\n\nexport async function getAccounts() {\n  const contract = await getContract();\n  return contract.getAccounts();\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,YAAY,QAAQ,0BAA0B;AACvD,MAAMC,QAAQ,GAAG,IAAID,YAAY,CAACE,MAAM,CAACC,QAAQ,CAAC;AAElD,MAAMC,GAAG,GAAG,CACV,mFAAmF,EACnF,uEAAuE,EACvE,2GAA2G,EAC3G,qEAAqE,EACrE,+JAA+J,EAC/J,0EAA0E,EAC1E,wDAAwD,EACxD,iDAAiD,EACjD,0CAA0C,EAC1C,6CAA6C,EAC7C,0EAA0E,EAC1E,+DAA+D,EAC/D,wKAAwK,CACzK;;AAED;AACA,MAAMC,OAAO,GAAG,4CAA4C;;AAE5D;AACA,IAAIC,QAAQ,GAAG,IAAI;AAEnB,eAAeC,mBAAmBA,CAACC,MAAM,GAAG,KAAK,EAAE;EACjD;EACA,MAAMP,QAAQ,CAACQ,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;EAC5C;EACF,OAAOD,MAAM,GAAGP,QAAQ,CAACS,SAAS,CAAC,CAAC,GAAGT,QAAQ;AACjD;AAEA,OAAO,eAAeU,WAAWA,CAACH,MAAM,GAAG,KAAK,EAAE;EAChD,IAAI,CAACF,QAAQ,EAAE;IACb,MAAMM,gBAAgB,GAAG,MAAML,mBAAmB,CAACC,MAAM,CAAC;IAC1DF,QAAQ,GAAG,IAAIP,MAAM,CAACc,QAAQ,CAACR,OAAO,EAAED,GAAG,EAAEQ,gBAAgB,CAAC;EAChE;EACA,OAAON,QAAQ;AACjB;AAEA,OAAO,eAAeQ,aAAaA,CAACC,KAAK,EAAE;EACzC,MAAMC,kBAAkB,GAAG,MAAML,WAAW,CAAC,IAAI,CAAC;EAClD,MAAMM,EAAE,GAAG,MAAMD,kBAAkB,CAACF,aAAa,CAACC,KAAK,CAAC;EACxD,OAAOE,EAAE,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB;AAEA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,MAAMb,QAAQ,GAAG,MAAMK,WAAW,CAAC,CAAC;EACpC,OAAOL,QAAQ,CAACa,WAAW,CAAC,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}