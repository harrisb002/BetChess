{"ast":null,"code":"import { PieceType, Side } from \"./Types\";\nimport { Board } from \"./models/Board\";\nimport { Pawn } from \"./models/Pawn\";\nimport { Piece } from \"./models/Piece\";\nimport { Position } from \"./models/Position\";\nexport const X_AXIS = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nexport const Y_AXIS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nexport const GRID_SIZE = 100;\n\n// Initialize the board\nexport const initialBoard = new Board([\n//White Pawns\nnew Pawn(new Position(0, 1), false, Side.ALLY), new Pawn(new Position(1, 1), false, Side.ALLY), new Pawn(new Position(2, 1), false, Side.ALLY), new Pawn(new Position(3, 1), false, Side.ALLY), new Pawn(new Position(4, 1), false, Side.ALLY), new Pawn(new Position(5, 1), false, Side.ALLY), new Pawn(new Position(6, 1), false, Side.ALLY), new Pawn(new Position(7, 1), false, Side.ALLY),\n//Black Pawns\nnew Pawn(new Position(0, 6), false, Side.OPPONENT), new Pawn(new Position(1, 6), false, Side.OPPONENT), new Pawn(new Position(2, 6), false, Side.OPPONENT), new Pawn(new Position(3, 6), false, Side.OPPONENT), new Pawn(new Position(4, 6), false, Side.OPPONENT), new Pawn(new Position(5, 6), false, Side.OPPONENT), new Pawn(new Position(6, 6), false, Side.OPPONENT), new Pawn(new Position(7, 6), false, Side.OPPONENT),\n//White rooks\nnew Piece(new Position(0, 0), PieceType.ROOK, false, Side.ALLY), new Piece(new Position(7, 0), PieceType.ROOK, false, Side.ALLY),\n//Black rooks\nnew Piece(new Position(0, 7), PieceType.ROOK, false, Side.OPPONENT), new Piece(new Position(7, 7), PieceType.ROOK, false, Side.OPPONENT),\n//White knights\nnew Piece(new Position(1, 0), PieceType.KNIGHT, false, Side.ALLY), new Piece(new Position(6, 0), PieceType.KNIGHT, false, Side.ALLY),\n//Black knights\nnew Piece(new Position(1, 7), PieceType.KNIGHT, false, Side.OPPONENT), new Piece(new Position(6, 7), PieceType.KNIGHT, false, Side.OPPONENT),\n//White bishops\nnew Piece(new Position(2, 0), PieceType.BISHOP, false, Side.ALLY), new Piece(new Position(5, 0), PieceType.BISHOP, false, Side.ALLY),\n//Black bishops\nnew Piece(new Position(2, 7), PieceType.BISHOP, false, Side.OPPONENT), new Piece(new Position(5, 7), PieceType.BISHOP, false, Side.OPPONENT),\n//Queens\nnew Piece(new Position(3, 0), PieceType.QUEEN, false, Side.ALLY), new Piece(new Position(3, 7), PieceType.QUEEN, false, Side.OPPONENT),\n//Kings\nnew Piece(new Position(4, 0), PieceType.KING, false, Side.ALLY), new Piece(new Position(4, 7), PieceType.KING, false, Side.OPPONENT)], 1);\n\n// Get all moves upon restarting the game\ninitialBoard.getAllMoves();","map":{"version":3,"names":["PieceType","Side","Board","Pawn","Piece","Position","X_AXIS","Y_AXIS","GRID_SIZE","initialBoard","ALLY","OPPONENT","ROOK","KNIGHT","BISHOP","QUEEN","KING","getAllMoves"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/Constants.ts"],"sourcesContent":["import { PieceType, Side } from \"./Types\";\nimport { Board } from \"./models/Board\";\nimport { Pawn } from \"./models/Pawn\";\nimport { Piece } from \"./models/Piece\";\nimport { Position } from \"./models/Position\";\n\nexport const X_AXIS = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nexport const Y_AXIS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nexport const GRID_SIZE = 100;\n\n// Initialize the board\nexport const initialBoard: Board = new Board([\n  //White Pawns\n  new Pawn(new Position(0, 1), false, Side.ALLY),\n  new Pawn(new Position(1, 1), false, Side.ALLY),\n  new Pawn(new Position(2, 1), false, Side.ALLY),\n  new Pawn(new Position(3, 1), false, Side.ALLY),\n  new Pawn(new Position(4, 1), false, Side.ALLY),\n  new Pawn(new Position(5, 1), false, Side.ALLY),\n  new Pawn(new Position(6, 1), false, Side.ALLY),\n  new Pawn(new Position(7, 1), false, Side.ALLY),\n\n  //Black Pawns\n  new Pawn(new Position(0, 6), false, Side.OPPONENT),\n  new Pawn(new Position(1, 6), false, Side.OPPONENT),\n  new Pawn(new Position(2, 6), false, Side.OPPONENT),\n  new Pawn(new Position(3, 6), false, Side.OPPONENT),\n  new Pawn(new Position(4, 6), false, Side.OPPONENT),\n  new Pawn(new Position(5, 6), false, Side.OPPONENT),\n  new Pawn(new Position(6, 6), false, Side.OPPONENT),\n  new Pawn(new Position(7, 6), false, Side.OPPONENT),\n\n  //White rooks\n  new Piece(new Position(0, 0), PieceType.ROOK, false, Side.ALLY),\n  new Piece(new Position(7, 0), PieceType.ROOK, false, Side.ALLY),\n\n  //Black rooks\n  new Piece(new Position(0, 7), PieceType.ROOK, false, Side.OPPONENT),\n  new Piece(new Position(7, 7), PieceType.ROOK, false, Side.OPPONENT),\n\n  //White knights\n  new Piece(new Position(1, 0), PieceType.KNIGHT, false, Side.ALLY),\n  new Piece(new Position(6, 0), PieceType.KNIGHT, false, Side.ALLY),\n\n  //Black knights\n  new Piece(new Position(1, 7), PieceType.KNIGHT, false, Side.OPPONENT),\n  new Piece(new Position(6, 7), PieceType.KNIGHT, false, Side.OPPONENT),\n\n  //White bishops\n  new Piece(new Position(2, 0), PieceType.BISHOP, false, Side.ALLY),\n  new Piece(new Position(5, 0), PieceType.BISHOP, false, Side.ALLY),\n\n  //Black bishops\n  new Piece(new Position(2, 7), PieceType.BISHOP, false, Side.OPPONENT),\n  new Piece(new Position(5, 7), PieceType.BISHOP, false, Side.OPPONENT),\n\n  //Queens\n  new Piece(new Position(3, 0), PieceType.QUEEN, false, Side.ALLY),\n  new Piece(new Position(3, 7), PieceType.QUEEN, false, Side.OPPONENT),\n\n  //Kings\n  new Piece(new Position(4, 0), PieceType.KING, false, Side.ALLY),\n  new Piece(new Position(4, 7), PieceType.KING, false, Side.OPPONENT),\n], 1);\n\n// Get all moves upon restarting the game\ninitialBoard.getAllMoves();"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}