{"ast":null,"code":"import { Side } from \"../../Types\";\nimport { Position } from \"../../models\";\nimport { opponentOnTile, tileIsEmpty } from \"./GenralRules\";\nexport const pawnMove = (initialPosition, desiredPosition, side, boardState) => {\n  const specialRow = side === Side.ALLY ? 1 : 6;\n  const pawnMovement = side === Side.ALLY ? 1 : -1;\n  if (initialPosition.x === desiredPosition.x && initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnMovement) {\n    if (tileIsEmpty(desiredPosition, boardState) && tileIsEmpty(new Position(desiredPosition.x, desiredPosition.y - pawnMovement), boardState)) {\n      return true;\n    }\n  } else if (initialPosition.x === desiredPosition.x && desiredPosition.y - initialPosition.y === pawnMovement) {\n    if (tileIsEmpty(desiredPosition, boardState)) {\n      return true;\n    }\n  } else if (\n  //Attacking in upper of bottom left corner\n  desiredPosition.x - initialPosition.x === -1 && desiredPosition.y - initialPosition.y === pawnMovement) {\n    if (opponentOnTile(desiredPosition, boardState, side)) {\n      return true;\n    }\n  } //Attacking in the upper or bottom right corner\n  else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnMovement) {\n    if (opponentOnTile(desiredPosition, boardState, side)) {\n      return true;\n    }\n  }\n  return false;\n};\nexport const getAllPawnMoves = (pawn, boardState) => {\n  const possibleMoves = [];\n  const specialRow = pawn.side === Side.ALLY ? 1 : 6;\n  const pawnMovement = pawn.side === Side.ALLY ? 1 : -1;\n  const regularMove = new Position(pawn.position.x, pawn.position.y + pawnMovement);\n  const doubleJump = new Position(regularMove.x, regularMove.y + pawnMovement);\n  const attackLeft = new Position(pawn.position.x - 1, pawn.position.y + pawnMovement);\n  const attackRight = new Position(pawn.position.x + 1, pawn.position.y + pawnMovement);\n  const leftPosition = new Position(pawn.position.x - 1, pawn.position.y);\n  const rightPosition = new Position(pawn.position.x + 1, pawn.position.y);\n  if (tileIsEmpty(regularMove, boardState)) {\n    possibleMoves.push(regularMove);\n    if (pawn.position.y === specialRow && tileIsEmpty(doubleJump, boardState)) {\n      possibleMoves.push(doubleJump);\n    }\n  }\n\n  // Checking to Attack left for both regular attack as well as enPassant\n  if (opponentOnTile(attackLeft, boardState, pawn.side)) {\n    possibleMoves.push(attackLeft); // Can regular attack opponent to the left\n  } else if (tileIsEmpty(attackLeft, boardState)) {\n    // Get the opponent pawn to the left and see if it made an enPassant move to allow special attack\n    const leftPiece = boardState.find(pawn => pawn.samePosition(leftPosition));\n    if (leftPiece != null && leftPiece.enPassant) {\n      possibleMoves.push(attackLeft);\n    }\n  }\n\n  // Checking to Attack right for both regular attack as well as enPassant\n  if (opponentOnTile(attackRight, boardState, pawn.side)) {\n    possibleMoves.push(attackRight);\n  } else if (tileIsEmpty(attackRight, boardState)) {\n    const rightPiece = boardState.find(pawn => pawn.samePosition(rightPosition));\n    if (rightPiece != null && rightPiece.enPassant) {\n      possibleMoves.push(attackRight);\n    }\n  }\n  return possibleMoves;\n};","map":{"version":3,"names":["Side","Position","opponentOnTile","tileIsEmpty","pawnMove","initialPosition","desiredPosition","side","boardState","specialRow","ALLY","pawnMovement","x","y","getAllPawnMoves","pawn","possibleMoves","regularMove","position","doubleJump","attackLeft","attackRight","leftPosition","rightPosition","push","leftPiece","find","samePosition","enPassant","rightPiece"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/referee/rules/PawnRules.ts"],"sourcesContent":["import { Side } from \"../../Types\";\nimport { Piece, Position } from \"../../models\";\nimport { Pawn } from \"../../models/Pawn\";\nimport {\n  opponentOnTile,\n  tileIsEmpty,\n} from \"./GenralRules\";\n\nexport const pawnMove = (\n  initialPosition: Position,\n  desiredPosition: Position,\n  side: Side,\n  boardState: Piece[]\n): boolean => {\n  const specialRow = side === Side.ALLY ? 1 : 6;\n  const pawnMovement = side === Side.ALLY ? 1 : -1;\n\n  if (\n    initialPosition.x === desiredPosition.x &&\n    initialPosition.y === specialRow &&\n    desiredPosition.y - initialPosition.y === 2 * pawnMovement\n  ) {\n    if (\n      tileIsEmpty(desiredPosition, boardState) &&\n      tileIsEmpty(new Position(desiredPosition.x, desiredPosition.y - pawnMovement), boardState)\n    ) {\n      return true;\n    }\n  } else if (\n    initialPosition.x === desiredPosition.x &&\n    desiredPosition.y - initialPosition.y === pawnMovement\n  ) {\n    if (tileIsEmpty(desiredPosition, boardState)) {\n      return true;\n    }\n  } else if (\n    //Attacking in upper of bottom left corner\n    desiredPosition.x - initialPosition.x === -1 &&\n    desiredPosition.y - initialPosition.y === pawnMovement\n  ) {\n    if (opponentOnTile(desiredPosition, boardState, side)) {\n      return true;\n    }\n  } //Attacking in the upper or bottom right corner\n  else if (\n    desiredPosition.x - initialPosition.x === 1 &&\n    desiredPosition.y - initialPosition.y === pawnMovement\n  ) {\n    if (opponentOnTile(desiredPosition, boardState, side)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const getAllPawnMoves = (\n  pawn: Piece,\n  boardState: Piece[]\n): Position[] => {\n  const possibleMoves: Position[] = [];\n\n  const specialRow = pawn.side === Side.ALLY ? 1 : 6;\n  const pawnMovement = pawn.side === Side.ALLY ? 1 : -1;\n\n  const regularMove: Position = new Position(pawn.position.x, pawn.position.y + pawnMovement)\n  const doubleJump: Position = new Position(regularMove.x, regularMove.y + pawnMovement)\n  const attackLeft: Position = new Position(pawn.position.x - 1, pawn.position.y + pawnMovement)\n  const attackRight: Position = new Position(pawn.position.x + 1, pawn.position.y + pawnMovement)\n  const leftPosition: Position = new Position(pawn.position.x - 1, pawn.position.y)\n  const rightPosition: Position = new Position(pawn.position.x + 1, pawn.position.y)\n\n  if (tileIsEmpty(regularMove, boardState)) {\n    possibleMoves.push(regularMove);\n\n    if (pawn.position.y === specialRow && tileIsEmpty(doubleJump, boardState)) {\n      possibleMoves.push(doubleJump);\n    }\n  }\n\n  // Checking to Attack left for both regular attack as well as enPassant\n  if (opponentOnTile(attackLeft, boardState, pawn.side)) {\n    possibleMoves.push(attackLeft); // Can regular attack opponent to the left\n  } else if (tileIsEmpty(attackLeft, boardState)) {\n    // Get the opponent pawn to the left and see if it made an enPassant move to allow special attack\n    const leftPiece = boardState.find((pawn) =>\n      pawn.samePosition(leftPosition)\n    );\n    if (leftPiece != null && (leftPiece as Pawn).enPassant) {\n      possibleMoves.push(attackLeft);\n    }\n  }\n\n  // Checking to Attack right for both regular attack as well as enPassant\n  if (opponentOnTile(attackRight, boardState, pawn.side)) {\n    possibleMoves.push(attackRight);\n  } else if (tileIsEmpty(attackRight, boardState)) {\n    const rightPiece = boardState.find((pawn) =>\n      pawn.samePosition(rightPosition)\n    );\n    if (rightPiece != null && (rightPiece as Pawn).enPassant) {\n      possibleMoves.push(attackRight);\n    }\n  }\n\n  return possibleMoves;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}