{"ast":null,"code":"import { PieceType } from \"../Types\";\nexport class Piece {\n  constructor(position, type, hasMoved, side, possibleMoves = []) {\n    this.image = void 0;\n    this.position = void 0;\n    this.type = void 0;\n    this.side = void 0;\n    this.possibleMoves = void 0;\n    this.hasMoved = void 0;\n    this.image = `assets/images/${type}_${side}.png`;\n    this.position = position;\n    this.type = type;\n    this.hasMoved = hasMoved;\n    this.side = side;\n    this.possibleMoves = possibleMoves;\n  }\n\n  // Used to return a copy of a piece to create a copy of the board to update UI\n  clone() {\n    var _this$possibleMoves;\n    return new Piece(this.position.clone(), this.type, this.hasMoved, this.side, (_this$possibleMoves = this.possibleMoves) === null || _this$possibleMoves === void 0 ? void 0 : _this$possibleMoves.map(possibleMove => possibleMove.clone()));\n  }\n  get isPawn() {\n    return this.type === PieceType.PAWN;\n  }\n  get isKnight() {\n    return this.type === PieceType.KNIGHT;\n  }\n  get isBishop() {\n    return this.type === PieceType.BISHOP;\n  }\n  get isRook() {\n    return this.type === PieceType.ROOK;\n  }\n  get isQueen() {\n    return this.type === PieceType.QUEEN;\n  }\n  get isKing() {\n    return this.type === PieceType.KING;\n  }\n\n  // Compares two piece positions\n  samePiecePosition(otherPiece) {\n    return this.position.samePosition(otherPiece.position);\n  }\n\n  // Overload to compare two positions\n  samePosition(otherPosition) {\n    return this.position.samePosition(otherPosition);\n  }\n}","map":{"version":3,"names":["PieceType","Piece","constructor","position","type","hasMoved","side","possibleMoves","image","clone","_this$possibleMoves","map","possibleMove","isPawn","PAWN","isKnight","KNIGHT","isBishop","BISHOP","isRook","ROOK","isQueen","QUEEN","isKing","KING","samePiecePosition","otherPiece","samePosition","otherPosition"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/models/Piece.ts"],"sourcesContent":["import { PieceType, Side } from \"../Types\";\nimport { Position } from \"./Position\";\n\nexport class Piece {\n    image: string;\n    position: Position;\n    type: PieceType;\n    side: Side;\n    possibleMoves: Position[];\n    hasMoved: boolean;\n\n    constructor(position: Position, type: PieceType, hasMoved: boolean, side: Side, possibleMoves: Position[] = []) {\n        this.image = `assets/images/${type}_${side}.png`;\n        this.position = position;\n        this.type = type;\n        this.hasMoved = hasMoved;\n        this.side = side;\n        this.possibleMoves = possibleMoves;\n    }\n\n    // Used to return a copy of a piece to create a copy of the board to update UI\n    clone(): Piece {\n        return new Piece(this.position.clone(), this.type, this.hasMoved, this.side, this.possibleMoves?.map(possibleMove => possibleMove.clone()));\n    }\n\n    get isPawn(): boolean {\n        return this.type === PieceType.PAWN;\n    }\n    get isKnight(): boolean {\n        return this.type === PieceType.KNIGHT;\n    }\n    get isBishop(): boolean {\n        return this.type === PieceType.BISHOP;\n    }\n    get isRook(): boolean {\n        return this.type === PieceType.ROOK;\n    }\n    get isQueen(): boolean {\n        return this.type === PieceType.QUEEN;\n    }\n    get isKing(): boolean {\n        return this.type === PieceType.KING\n    }\n\n    // Compares two piece positions\n    samePiecePosition(otherPiece: Piece): boolean {\n        return this.position.samePosition(otherPiece.position);\n    }\n\n    // Overload to compare two positions\n    samePosition(otherPosition: Position): boolean {\n        return this.position.samePosition(otherPosition);\n    }\n}"],"mappings":"AAAA,SAASA,SAAS,QAAc,UAAU;AAG1C,OAAO,MAAMC,KAAK,CAAC;EAQfC,WAAWA,CAACC,QAAkB,EAAEC,IAAe,EAAEC,QAAiB,EAAEC,IAAU,EAAEC,aAAyB,GAAG,EAAE,EAAE;IAAA,KAPhHC,KAAK;IAAA,KACLL,QAAQ;IAAA,KACRC,IAAI;IAAA,KACJE,IAAI;IAAA,KACJC,aAAa;IAAA,KACbF,QAAQ;IAGJ,IAAI,CAACG,KAAK,GAAI,iBAAgBJ,IAAK,IAAGE,IAAK,MAAK;IAChD,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,aAAa,GAAGA,aAAa;EACtC;;EAEA;EACAE,KAAKA,CAAA,EAAU;IAAA,IAAAC,mBAAA;IACX,OAAO,IAAIT,KAAK,CAAC,IAAI,CAACE,QAAQ,CAACM,KAAK,CAAC,CAAC,EAAE,IAAI,CAACL,IAAI,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,IAAI,GAAAI,mBAAA,GAAE,IAAI,CAACH,aAAa,cAAAG,mBAAA,uBAAlBA,mBAAA,CAAoBC,GAAG,CAACC,YAAY,IAAIA,YAAY,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;EAC/I;EAEA,IAAII,MAAMA,CAAA,EAAY;IAClB,OAAO,IAAI,CAACT,IAAI,KAAKJ,SAAS,CAACc,IAAI;EACvC;EACA,IAAIC,QAAQA,CAAA,EAAY;IACpB,OAAO,IAAI,CAACX,IAAI,KAAKJ,SAAS,CAACgB,MAAM;EACzC;EACA,IAAIC,QAAQA,CAAA,EAAY;IACpB,OAAO,IAAI,CAACb,IAAI,KAAKJ,SAAS,CAACkB,MAAM;EACzC;EACA,IAAIC,MAAMA,CAAA,EAAY;IAClB,OAAO,IAAI,CAACf,IAAI,KAAKJ,SAAS,CAACoB,IAAI;EACvC;EACA,IAAIC,OAAOA,CAAA,EAAY;IACnB,OAAO,IAAI,CAACjB,IAAI,KAAKJ,SAAS,CAACsB,KAAK;EACxC;EACA,IAAIC,MAAMA,CAAA,EAAY;IAClB,OAAO,IAAI,CAACnB,IAAI,KAAKJ,SAAS,CAACwB,IAAI;EACvC;;EAEA;EACAC,iBAAiBA,CAACC,UAAiB,EAAW;IAC1C,OAAO,IAAI,CAACvB,QAAQ,CAACwB,YAAY,CAACD,UAAU,CAACvB,QAAQ,CAAC;EAC1D;;EAEA;EACAwB,YAAYA,CAACC,aAAuB,EAAW;IAC3C,OAAO,IAAI,CAACzB,QAAQ,CAACwB,YAAY,CAACC,aAAa,CAAC;EACpD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}