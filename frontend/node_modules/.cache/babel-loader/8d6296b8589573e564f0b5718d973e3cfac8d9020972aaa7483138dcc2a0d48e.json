{"ast":null,"code":"var _jsxFileName = \"/Users/harrisb/Desktop/BetChess/frontend/src/components/Referee/Referee.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport Chessboard from \"../Chessboard/Chessboard\";\nimport { initialBoard } from \"../../Constants\";\nimport { Piece } from \"../../models\";\nimport { PieceType, Side } from \"../../Types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Referee() {\n  _s();\n  // Pass initial board state to be called when component first rendered\n  const [board, setBoard] = useState(initialBoard.clone());\n  // Create state for when the promotion piece is updated\n  const [promotionPawn, setPromotionPawn] = useState();\n  // Create referecne to the modal to open/hide it\n  const modalRef = useRef(null);\n  const checkmateModalRef = useRef(null);\n  function updateAllMoves() {\n    board.getAllMoves();\n  }\n\n  // Returns the styling needed after a move has been made\n  function makeMove(pieceInPlay, destination) {\n    var _pieceInPlay$possible;\n    // Check if the player is the one that is currently to move\n    if (pieceInPlay.side === Side.ALLY && board.totalTurns % 2 !== 1 || pieceInPlay.side === Side.OPPONENT && board.totalTurns % 2 !== 0) {\n      return false;\n    }\n\n    // If not possible moves then just return false\n    if (pieceInPlay.possibleMoves === undefined) return false;\n\n    // Force snap-back functionality on pieces using this bool\n    let validMovePlayed = false;\n\n    // Check for valid move given if a piece is being attacked\n    // If you can see the \"dots\" being displayed then you can move there\n    const validMove = (_pieceInPlay$possible = pieceInPlay.possibleMoves) === null || _pieceInPlay$possible === void 0 ? void 0 : _pieceInPlay$possible.some(move => move.samePosition(destination));\n\n    // Disallows somthing like dragging the pawn to the promotion sqaure immediately causing modal to open\n    if (!validMove) return false;\n\n    // Check for enPassant\n    const isEnPassantMove = isEnPassant(pieceInPlay.position, destination, pieceInPlay.type, pieceInPlay.side);\n\n    // update the UI when next move is made\n    setBoard(() => {\n      const cloneBoard = board.clone();\n      cloneBoard.totalTurns += 1; // Increment whose turn it is, before calculating valid moves so it is updated accordingly\n      // Making the next move\n      validMovePlayed = cloneBoard.makeMove(isEnPassantMove, validMove, pieceInPlay, destination);\n      console.log(cloneBoard.winningTeam);\n\n      // If checkmate then remove hidden class from the checkmate modal\n      if (cloneBoard.winningTeam !== undefined) {\n        var _checkmateModalRef$cu;\n        (_checkmateModalRef$cu = checkmateModalRef.current) === null || _checkmateModalRef$cu === void 0 ? void 0 : _checkmateModalRef$cu.classList.remove(\"hidden\");\n      }\n      return cloneBoard; // Retun new updatedboard\n    });\n\n    // Check for pawn promotion.\n    let promotionRow = pieceInPlay.side === Side.ALLY ? 7 : 0;\n    if (destination.y === promotionRow && pieceInPlay.isPawn) {\n      var _modalRef$current;\n      // If the pawn reaches the opposite end, trigger the promotion modal.\n      (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n      // Must update the position of the pawn being promoted\n      setPromotionPawn(prevPromotionPawn => {\n        const clonePeiceInPlay = pieceInPlay.clone();\n        clonePeiceInPlay.position = destination.clone();\n        return clonePeiceInPlay;\n      });\n    }\n    // If the function reaches this point, the move was successful.\n    return validMovePlayed;\n  }\n  function isEnPassant(initialPosition, desiredPosition, type, side) {\n    // Find the direction that the pawn is moving\n    const pawnMovement = side === Side.ALLY ? 1 : -1;\n\n    //Check if attacking piece is pawn\n    if (type === PieceType.PAWN) {\n      // Upper or bottom left corner || Upper or bottom right corner\n      if ((desiredPosition.x - initialPosition.x === -1 ||\n      //Blacks EnPassant\n      desiredPosition.x - initialPosition.x === 1) &&\n      //ALLYs EnPassant\n      // If the spot the pawn has moved is on the same file as the opponents\n      desiredPosition.y - initialPosition.y === pawnMovement) {\n        // Find the piece that has the required qualities\n        const currPiece = board.pieces.find(piece =>\n        // piece needs to be in the same collumn the pawn is moving to\n        piece.position.x === desiredPosition.x &&\n        // piece also needs to be one tile behind the piece that it is hitting\n        piece.position.y === desiredPosition.y - pawnMovement && piece.isPawn && piece.enPassant);\n        if (currPiece) {\n          // Return it if the piece meets the criteria\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  function promote(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    setBoard(() => {\n      // Must make a new board to let react know the object has changed\n      const clonedBoard = board.clone();\n      // Need to loop through pieces and update them\n      clonedBoard.pieces = clonedBoard.pieces.reduce((currPieces, piece) => {\n        //Check if the current piece being updated it the promotion piece\n        if (piece.samePiecePosition(promotionPawn)) {\n          // Must clone the piece into the type it is being converted into\n          // Constructor is determining the image, type, and side\n          currPieces.push(new Piece(piece.position.clone(), pieceType, true, piece.side));\n        } else {\n          // If it is not a promotion pawn, then just push the existing piece\n          currPieces.push(piece);\n        }\n        return currPieces;\n      }, []);\n\n      // get all the moves for the new peices\n      clonedBoard.getAllMoves();\n      return clonedBoard;\n    });\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\"); //Hide the modal\n  }\n  function promotionSide() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.side) === Side.ALLY ? \"w\" : \"b\";\n  }\n  function restartGame() {\n    var _checkmateModalRef$cu2;\n    (_checkmateModalRef$cu2 = checkmateModalRef.current) === null || _checkmateModalRef$cu2 === void 0 ? void 0 : _checkmateModalRef$cu2.classList.add(\"hidden\");\n    setBoard(initialBoard.clone());\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"white\",\n        fontSize: \"32px\"\n      },\n      children: [\" \", `${board.currentSide === \"w\" ? \"White\" : \"Black\"} to move`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promote(PieceType.QUEEN),\n          src: `/assets/images/queen_${promotionSide()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promote(PieceType.ROOK),\n          src: `/assets/images/rook_${promotionSide()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promote(PieceType.BISHOP),\n          src: `/assets/images/bishop_${promotionSide()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promote(PieceType.KNIGHT),\n          src: `/assets/images/knight_${promotionSide()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal hidden\",\n      ref: checkmateModalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkmate-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Winning team is\", \" \", board.winningTeam === Side.ALLY ? \"White\" : \"Black\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: restartGame,\n            children: \"Play again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n      makeMove: makeMove,\n      pieces: board.pieces\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Referee, \"orzoJe8LafqeoMVJ8Q0I8Qjl41k=\");\n_c = Referee;\nvar _c;\n$RefreshReg$(_c, \"Referee\");","map":{"version":3,"names":["useRef","useState","Chessboard","initialBoard","Piece","PieceType","Side","jsxDEV","_jsxDEV","Fragment","_Fragment","Referee","_s","board","setBoard","clone","promotionPawn","setPromotionPawn","modalRef","checkmateModalRef","updateAllMoves","getAllMoves","makeMove","pieceInPlay","destination","_pieceInPlay$possible","side","ALLY","totalTurns","OPPONENT","possibleMoves","undefined","validMovePlayed","validMove","some","move","samePosition","isEnPassantMove","isEnPassant","position","type","cloneBoard","console","log","winningTeam","_checkmateModalRef$cu","current","classList","remove","promotionRow","y","isPawn","_modalRef$current","prevPromotionPawn","clonePeiceInPlay","initialPosition","desiredPosition","pawnMovement","PAWN","x","currPiece","pieces","find","piece","enPassant","promote","pieceType","_modalRef$current2","clonedBoard","reduce","currPieces","samePiecePosition","push","add","promotionSide","restartGame","_checkmateModalRef$cu2","children","style","color","fontSize","currentSide","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","onClick","QUEEN","src","ROOK","BISHOP","KNIGHT","_c","$RefreshReg$"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/components/Referee/Referee.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport Chessboard from \"../Chessboard/Chessboard\";\nimport { initialBoard } from \"../../Constants\";\nimport { Piece, Position } from \"../../models\";\nimport { PieceType, Side } from \"../../Types\";\nimport { Pawn } from \"../../models/Pawn\";\nimport { Board } from \"../../models/Board\";\n\nexport default function Referee() {\n  // Pass initial board state to be called when component first rendered\n  const [board, setBoard] = useState<Board>(initialBoard.clone());\n  // Create state for when the promotion piece is updated\n  const [promotionPawn, setPromotionPawn] = useState<Piece>();\n  // Create referecne to the modal to open/hide it\n  const modalRef = useRef<HTMLDivElement>(null);\n  const checkmateModalRef = useRef<HTMLDivElement>(null);\n\n  function updateAllMoves() {\n    board.getAllMoves();\n  }\n\n  // Returns the styling needed after a move has been made\n  function makeMove(pieceInPlay: Piece, destination: Position): boolean {\n    // Check if the player is the one that is currently to move\n    if (\n      (pieceInPlay.side === Side.ALLY && board.totalTurns % 2 !== 1) ||\n      (pieceInPlay.side === Side.OPPONENT && board.totalTurns % 2 !== 0)\n    ) {\n      return false;\n    }\n\n    // If not possible moves then just return false\n    if (pieceInPlay.possibleMoves === undefined) return false;\n\n    // Force snap-back functionality on pieces using this bool\n    let validMovePlayed = false;\n\n    // Check for valid move given if a piece is being attacked\n    // If you can see the \"dots\" being displayed then you can move there\n    const validMove = pieceInPlay.possibleMoves?.some((move) =>\n      move.samePosition(destination)\n    );\n\n    // Disallows somthing like dragging the pawn to the promotion sqaure immediately causing modal to open\n    if (!validMove) return false;\n\n    // Check for enPassant\n    const isEnPassantMove = isEnPassant(\n      pieceInPlay.position,\n      destination,\n      pieceInPlay.type,\n      pieceInPlay.side\n    );\n\n    // update the UI when next move is made\n    setBoard(() => {\n      const cloneBoard = board.clone();\n      cloneBoard.totalTurns += 1; // Increment whose turn it is, before calculating valid moves so it is updated accordingly\n      // Making the next move\n      validMovePlayed = cloneBoard.makeMove(\n        isEnPassantMove,\n        validMove,\n        pieceInPlay,\n        destination\n      );\n      console.log(cloneBoard.winningTeam);\n\n      // If checkmate then remove hidden class from the checkmate modal\n      if (cloneBoard.winningTeam !== undefined) {\n        checkmateModalRef.current?.classList.remove(\"hidden\");\n      }\n\n      return cloneBoard; // Retun new updatedboard\n    });\n\n    // Check for pawn promotion.\n    let promotionRow = pieceInPlay.side === Side.ALLY ? 7 : 0;\n    if (destination.y === promotionRow && pieceInPlay.isPawn) {\n      // If the pawn reaches the opposite end, trigger the promotion modal.\n      modalRef.current?.classList.remove(\"hidden\");\n      // Must update the position of the pawn being promoted\n      setPromotionPawn((prevPromotionPawn) => {\n        const clonePeiceInPlay = pieceInPlay.clone();\n        clonePeiceInPlay.position = destination.clone();\n        return clonePeiceInPlay;\n      });\n    }\n    // If the function reaches this point, the move was successful.\n    return validMovePlayed;\n  }\n\n  function isEnPassant(\n    initialPosition: Position,\n    desiredPosition: Position,\n    type: PieceType,\n    side: Side\n  ) {\n    // Find the direction that the pawn is moving\n    const pawnMovement = side === Side.ALLY ? 1 : -1;\n\n    //Check if attacking piece is pawn\n    if (type === PieceType.PAWN) {\n      // Upper or bottom left corner || Upper or bottom right corner\n      if (\n        (desiredPosition.x - initialPosition.x === -1 || //Blacks EnPassant\n          desiredPosition.x - initialPosition.x === 1) && //ALLYs EnPassant\n        // If the spot the pawn has moved is on the same file as the opponents\n        desiredPosition.y - initialPosition.y === pawnMovement\n      ) {\n        // Find the piece that has the required qualities\n        const currPiece = board.pieces.find(\n          (piece) =>\n            // piece needs to be in the same collumn the pawn is moving to\n            piece.position.x === desiredPosition.x &&\n            // piece also needs to be one tile behind the piece that it is hitting\n            piece.position.y === desiredPosition.y - pawnMovement &&\n            piece.isPawn &&\n            (piece as Pawn).enPassant\n        );\n        if (currPiece) {\n          // Return it if the piece meets the criteria\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function promote(pieceType: PieceType) {\n    if (promotionPawn === undefined) {\n      return;\n    }\n\n    setBoard(() => {\n      // Must make a new board to let react know the object has changed\n      const clonedBoard = board.clone();\n      // Need to loop through pieces and update them\n      clonedBoard.pieces = clonedBoard.pieces.reduce((currPieces, piece) => {\n        //Check if the current piece being updated it the promotion piece\n        if (piece.samePiecePosition(promotionPawn)) {\n          // Must clone the piece into the type it is being converted into\n          // Constructor is determining the image, type, and side\n          currPieces.push(\n            new Piece(piece.position.clone(), pieceType, true, piece.side)\n          );\n        } else {\n          // If it is not a promotion pawn, then just push the existing piece\n          currPieces.push(piece);\n        }\n        return currPieces;\n      }, [] as Piece[]);\n\n      // get all the moves for the new peices\n      clonedBoard.getAllMoves();\n      return clonedBoard;\n    });\n    modalRef.current?.classList.add(\"hidden\"); //Hide the modal\n  }\n\n  function promotionSide() {\n    return promotionPawn?.side === Side.ALLY ? \"w\" : \"b\";\n  }\n\n  function restartGame() {\n    checkmateModalRef.current?.classList.add(\"hidden\");\n    setBoard(initialBoard.clone());\n  }\n\n  return (\n    <>\n      <p style={{ color: \"white\", fontSize: \"32px\" }}>\n        {\" \"}\n        {`${board.currentSide === \"w\" ? \"White\" : \"Black\"} to move`}\n      </p>\n      <div className=\"modal hidden\" ref={modalRef}>\n        <div className=\"modal-body\">\n          <img\n            onClick={() => promote(PieceType.QUEEN)}\n            src={`/assets/images/queen_${promotionSide()}.png`}\n          />\n          <img\n            onClick={() => promote(PieceType.ROOK)}\n            src={`/assets/images/rook_${promotionSide()}.png`}\n          />\n          <img\n            onClick={() => promote(PieceType.BISHOP)}\n            src={`/assets/images/bishop_${promotionSide()}.png`}\n          />\n          <img\n            onClick={() => promote(PieceType.KNIGHT)}\n            src={`/assets/images/knight_${promotionSide()}.png`}\n          />\n        </div>\n      </div>\n      <div className=\"modal hidden\" ref={checkmateModalRef}>\n        <div className=\"modal-body\">\n          <div className=\"checkmate-body\">\n            <span>\n              Winning team is{\" \"}\n              {board.winningTeam === Side.ALLY ? \"White\" : \"Black\"}\n            </span>\n            <button onClick={restartGame}>Play again</button>\n          </div>\n        </div>\n      </div>\n\n      <Chessboard makeMove={makeMove} pieces={board.pieces} />\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}