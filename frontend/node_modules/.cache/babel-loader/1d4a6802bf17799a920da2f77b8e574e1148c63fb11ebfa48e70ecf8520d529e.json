{"ast":null,"code":"// Check if the tile currently has a piece on it\nexport const tileIsEmpty = (position, boardState) => {\n  // check if the piece found in the position is null (if there is no piece placed there)\n  const piece = boardState.find(piece => piece.position.samePosition(position));\n  if (piece) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n// Checking if opponent is on a tile for attacking moves\nexport const opponentOnTile = (position, boardState, side) => {\n  // If the piece at this position is an opponent piece\n  const piece = boardState.find(piece => piece.samePosition(position) && piece.side !== side);\n  if (piece) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Combine the two functions above\nexport const tileEmptyOrOpponent = (position, boardState, side) => {\n  return tileIsEmpty(position, boardState) || opponentOnTile(position, boardState, side);\n};","map":{"version":3,"names":["tileIsEmpty","position","boardState","piece","find","samePosition","opponentOnTile","side","tileEmptyOrOpponent"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/referee/rules/GenralRules.ts"],"sourcesContent":["import { Side } from \"../../Types\";\nimport { Piece, Position } from \"../../models\";\n\n// Check if the tile currently has a piece on it\nexport const tileIsEmpty = (\n  position: Position,\n  boardState: Piece[]\n): boolean => {\n  // check if the piece found in the position is null (if there is no piece placed there)\n  const piece = boardState.find((piece) =>\n    piece.position.samePosition(position)\n  );\n  if (piece) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\n// Checking if opponent is on a tile for attacking moves\nexport const opponentOnTile = (\n  position: Position,\n  boardState: Piece[],\n  side: Side\n): boolean => {\n  // If the piece at this position is an opponent piece\n  const piece = boardState.find(\n    (piece) => piece.samePosition(position) && piece.side !== side\n  );\n  if (piece) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Combine the two functions above\nexport const tileEmptyOrOpponent = (\n  position: Position,\n  boardState: Piece[],\n  side: Side\n): boolean => {\n  return (\n    tileIsEmpty(position, boardState) ||\n    opponentOnTile(position, boardState, side)\n  );\n};\n"],"mappings":"AAGA;AACA,OAAO,MAAMA,WAAW,GAAGA,CACzBC,QAAkB,EAClBC,UAAmB,KACP;EACZ;EACA,MAAMC,KAAK,GAAGD,UAAU,CAACE,IAAI,CAAED,KAAK,IAClCA,KAAK,CAACF,QAAQ,CAACI,YAAY,CAACJ,QAAQ,CACtC,CAAC;EACD,IAAIE,KAAK,EAAE;IACT,OAAO,KAAK;EACd,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAGA,CAC5BL,QAAkB,EAClBC,UAAmB,EACnBK,IAAU,KACE;EACZ;EACA,MAAMJ,KAAK,GAAGD,UAAU,CAACE,IAAI,CAC1BD,KAAK,IAAKA,KAAK,CAACE,YAAY,CAACJ,QAAQ,CAAC,IAAIE,KAAK,CAACI,IAAI,KAAKA,IAC5D,CAAC;EACD,IAAIJ,KAAK,EAAE;IACT,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,mBAAmB,GAAGA,CACjCP,QAAkB,EAClBC,UAAmB,EACnBK,IAAU,KACE;EACZ,OACEP,WAAW,CAACC,QAAQ,EAAEC,UAAU,CAAC,IACjCI,cAAc,CAACL,QAAQ,EAAEC,UAAU,EAAEK,IAAI,CAAC;AAE9C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}