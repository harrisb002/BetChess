{"ast":null,"code":"import { ethers } from 'ethers';\nimport { Web3Provider } from '@ethersproject/providers';\nconst provider = new Web3Provider(window.ethereum);\nconst abi = [\"event AccountCreated(address owner, uint256 indexed accountId, uint256 timestamp)\", \"event Deposit(address indexed user, uint256 value, uint256 timestamp)\", \"event GameCreated(uint256 gameId, uint256 betAmount, address player1, address player2, uint256 timestamp)\", \"event GameResult(uint256 gameId, address winner, uint256 timestamp)\", \"function accountGames(uint256, uint256) view returns (uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)\", \"function accounts(uint256) view returns (address owner, uint256 balance)\", \"function approveBet(uint256 accountId, uint256 amount)\", \"function bet(uint256 accountId, uint256 amount)\", \"function createAccount(address newOwner)\", \"function deposit(uint256 accountId) payable\", \"function getAccounts() view returns ((address owner, uint256 balance)[])\", \"function getBalance(uint256 accountId) view returns (uint256)\", \"function getPreviousGames(uint256 accountId) view returns ((uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)[])\"];\n\n//Contract address\nconst address = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\n//Store the contract instance once gained access to metamask from client\nlet contract = null;\nasync function getContract(signer = false) {\n  // If a contract instance does not already exist, create one.\n  if (!contract) {\n    const providerOrSigner = await getProviderOrSigner(signer);\n    // Creates a new contract instance using the contract address, ABI, and either a provider or signer.\n    contract = new ethers.Contract(address, abi, providerOrSigner);\n  }\n  return contract;\n}\nexport async function createAccount(owner) {\n  // Ensures that a signer is used, as creating an account is a transaction that alters the blockchain state.\n  const contractWithSigner = await getContract(true);\n  // Calls the createAccount function of the contract with the owner's address.\n  const tx = await contractWithSigner.createAccount(owner);\n  // Waits for the transaction to be mined and returns the transaction receipt.\n  return tx.wait();\n}\nexport async function getAccounts() {\n  await getAccess();\n  const result = await contract.getAccounts();\n  document.getElementById(\"accounts\").innerHTML = result;\n}\nasync function getAccess() {\n  if (contract) return;\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  contract = new ethers.Contract(address, abi, signer);\n  const eventDisplay = document.getElementById(\"events\");\n\n  //Listen for event for this id (Defined in smart contract)\n  contract.on(\"AccountCreated\", (owners, id, event) => {\n    eventDisplay.append(`Account Created: ID = ${id}, Owners = ${owners}`);\n  });\n}","map":{"version":3,"names":["ethers","Web3Provider","provider","window","ethereum","abi","address","contract","getContract","signer","providerOrSigner","getProviderOrSigner","Contract","createAccount","owner","contractWithSigner","tx","wait","getAccounts","getAccess","result","document","getElementById","innerHTML","send","getSigner","eventDisplay","on","owners","id","event","append"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/ethersService.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { Web3Provider } from '@ethersproject/providers';\nconst provider = new Web3Provider(window.ethereum);\n\nconst abi = [\n  \"event AccountCreated(address owner, uint256 indexed accountId, uint256 timestamp)\",\n  \"event Deposit(address indexed user, uint256 value, uint256 timestamp)\",\n  \"event GameCreated(uint256 gameId, uint256 betAmount, address player1, address player2, uint256 timestamp)\",\n  \"event GameResult(uint256 gameId, address winner, uint256 timestamp)\",\n  \"function accountGames(uint256, uint256) view returns (uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)\",\n  \"function accounts(uint256) view returns (address owner, uint256 balance)\",\n  \"function approveBet(uint256 accountId, uint256 amount)\",\n  \"function bet(uint256 accountId, uint256 amount)\",\n  \"function createAccount(address newOwner)\",\n  \"function deposit(uint256 accountId) payable\",\n  \"function getAccounts() view returns ((address owner, uint256 balance)[])\",\n  \"function getBalance(uint256 accountId) view returns (uint256)\",\n  \"function getPreviousGames(uint256 accountId) view returns ((uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)[])\"\n];\n\n//Contract address\nconst address = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\n//Store the contract instance once gained access to metamask from client\nlet contract = null;\n\nasync function getContract(signer = false) {\n  // If a contract instance does not already exist, create one.\n  if (!contract) {\n    const providerOrSigner = await getProviderOrSigner(signer);\n    // Creates a new contract instance using the contract address, ABI, and either a provider or signer.\n    contract = new ethers.Contract(address, abi, providerOrSigner);\n  }\n  return contract;\n}\n\nexport async function createAccount(owner) {\n  // Ensures that a signer is used, as creating an account is a transaction that alters the blockchain state.\n  const contractWithSigner = await getContract(true);\n  // Calls the createAccount function of the contract with the owner's address.\n  const tx = await contractWithSigner.createAccount(owner);\n  // Waits for the transaction to be mined and returns the transaction receipt.\n  return tx.wait(); \n}\n\nexport async function getAccounts() {\n  await getAccess();\n  const result = await contract.getAccounts();\n  document.getElementById(\"accounts\").innerHTML = result;\n}\n\nasync function getAccess() {\n  if (contract) return;\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  contract = new ethers.Contract(address, abi, signer);\n\n  const eventDisplay = document.getElementById(\"events\");\n\n  //Listen for event for this id (Defined in smart contract)\n  contract.on(\"AccountCreated\", (owners, id, event) => {\n      eventDisplay.append(`Account Created: ID = ${id}, Owners = ${owners}`);\n  })\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,YAAY,QAAQ,0BAA0B;AACvD,MAAMC,QAAQ,GAAG,IAAID,YAAY,CAACE,MAAM,CAACC,QAAQ,CAAC;AAElD,MAAMC,GAAG,GAAG,CACV,mFAAmF,EACnF,uEAAuE,EACvE,2GAA2G,EAC3G,qEAAqE,EACrE,+JAA+J,EAC/J,0EAA0E,EAC1E,wDAAwD,EACxD,iDAAiD,EACjD,0CAA0C,EAC1C,6CAA6C,EAC7C,0EAA0E,EAC1E,+DAA+D,EAC/D,wKAAwK,CACzK;;AAED;AACA,MAAMC,OAAO,GAAG,4CAA4C;;AAE5D;AACA,IAAIC,QAAQ,GAAG,IAAI;AAEnB,eAAeC,WAAWA,CAACC,MAAM,GAAG,KAAK,EAAE;EACzC;EACA,IAAI,CAACF,QAAQ,EAAE;IACb,MAAMG,gBAAgB,GAAG,MAAMC,mBAAmB,CAACF,MAAM,CAAC;IAC1D;IACAF,QAAQ,GAAG,IAAIP,MAAM,CAACY,QAAQ,CAACN,OAAO,EAAED,GAAG,EAAEK,gBAAgB,CAAC;EAChE;EACA,OAAOH,QAAQ;AACjB;AAEA,OAAO,eAAeM,aAAaA,CAACC,KAAK,EAAE;EACzC;EACA,MAAMC,kBAAkB,GAAG,MAAMP,WAAW,CAAC,IAAI,CAAC;EAClD;EACA,MAAMQ,EAAE,GAAG,MAAMD,kBAAkB,CAACF,aAAa,CAACC,KAAK,CAAC;EACxD;EACA,OAAOE,EAAE,CAACC,IAAI,CAAC,CAAC;AAClB;AAEA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,MAAMC,SAAS,CAAC,CAAC;EACjB,MAAMC,MAAM,GAAG,MAAMb,QAAQ,CAACW,WAAW,CAAC,CAAC;EAC3CG,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,SAAS,GAAGH,MAAM;AACxD;AAEA,eAAeD,SAASA,CAAA,EAAG;EACzB,IAAIZ,QAAQ,EAAE;EACd,MAAML,QAAQ,CAACsB,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;EAC9C,MAAMf,MAAM,GAAGP,QAAQ,CAACuB,SAAS,CAAC,CAAC;EACnClB,QAAQ,GAAG,IAAIP,MAAM,CAACY,QAAQ,CAACN,OAAO,EAAED,GAAG,EAAEI,MAAM,CAAC;EAEpD,MAAMiB,YAAY,GAAGL,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;;EAEtD;EACAf,QAAQ,CAACoB,EAAE,CAAC,gBAAgB,EAAE,CAACC,MAAM,EAAEC,EAAE,EAAEC,KAAK,KAAK;IACjDJ,YAAY,CAACK,MAAM,CAAE,yBAAwBF,EAAG,cAAaD,MAAO,EAAC,CAAC;EAC1E,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}