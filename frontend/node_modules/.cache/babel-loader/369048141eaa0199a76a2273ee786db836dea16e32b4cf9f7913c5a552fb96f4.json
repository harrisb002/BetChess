{"ast":null,"code":"import { ethers } from 'ethers';\nimport { Web3Provider } from '@ethersproject/providers';\nconst provider = new Web3Provider(window.ethereum);\nconsole.log(\"The provider is\", provider);\nconst abi = [\"event AccountCreated(address owner, uint256 indexed accountId, uint256 timestamp)\", \"event Deposit(address indexed user, uint256 value, uint256 timestamp)\", \"event GameCreated(uint256 gameId, uint256 betAmount, address player1, address player2, uint256 timestamp)\", \"event GameResult(uint256 gameId, address winner, uint256 timestamp)\", \"function accountGames(uint256, uint256) view returns (uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)\", \"function accounts(uint256) view returns (address owner, uint256 balance)\", \"function approveBet(uint256 accountId, uint256 amount)\", \"function bet(uint256 accountId, uint256 amount)\", \"function createAccount(address newOwner)\", \"function deposit(uint256 accountId) payable\", \"function getAccounts() view returns ((address owner, uint256 balance)[])\", \"function getBalance(uint256 accountId) view returns (uint256)\", \"function getPreviousGames(uint256 accountId) view returns ((uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)[])\"];\n\n//Contract address\nconst address = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\";\n\n//Store the contract instance once gained access to metamask from client\nlet contract = null;\nexport async function createAccount(owner) {\n  await getAccess();\n  const owners = document.getElementById(\"owners\").value.split(\",\").filter(n => n);\n  await contract.createAccount(owners).then(() => alert(\"Success\"));\n}\nexport async function getAccounts() {\n  await getAccess();\n  console.log(\"Getting accounts\");\n  const result = await contract.getAccounts();\n  document.getElementById(\"accounts\").innerHTML = result;\n}\nasync function getAccess() {\n  if (contract) return; // If already initialized, skip\n\n  // Check if window.ethereum is available\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      // Create a new Web3 provider\n      const tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n      // Request account access\n      await tempProvider.send(\"eth_requestAccounts\", []);\n\n      // After access is granted, get the signer\n      const signer = tempProvider.getSigner();\n\n      // Initialize the contract with the signer\n      contract = new ethers.Contract(address, abi, signer);\n      console.log(\"Contract initialized:\", contract);\n    } catch (error) {\n      console.error(\"Error accessing Ethereum accounts:\", error);\n    }\n  } else {\n    console.error(\"Ethereum provider (e.g., MetaMask) not found.\");\n  }\n}","map":{"version":3,"names":["ethers","Web3Provider","provider","window","ethereum","console","log","abi","address","contract","createAccount","owner","getAccess","owners","document","getElementById","value","split","filter","n","then","alert","getAccounts","result","innerHTML","tempProvider","providers","send","signer","getSigner","Contract","error"],"sources":["/Users/harrisb/Desktop/BetChess/frontend/src/ethersService.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { Web3Provider } from '@ethersproject/providers';\nconst provider = new Web3Provider(window.ethereum);\nconsole.log(\"The provider is\", provider);\n\nconst abi = [\n  \"event AccountCreated(address owner, uint256 indexed accountId, uint256 timestamp)\",\n  \"event Deposit(address indexed user, uint256 value, uint256 timestamp)\",\n  \"event GameCreated(uint256 gameId, uint256 betAmount, address player1, address player2, uint256 timestamp)\",\n  \"event GameResult(uint256 gameId, address winner, uint256 timestamp)\",\n  \"function accountGames(uint256, uint256) view returns (uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)\",\n  \"function accounts(uint256) view returns (address owner, uint256 balance)\",\n  \"function approveBet(uint256 accountId, uint256 amount)\",\n  \"function bet(uint256 accountId, uint256 amount)\",\n  \"function createAccount(address newOwner)\",\n  \"function deposit(uint256 accountId) payable\",\n  \"function getAccounts() view returns ((address owner, uint256 balance)[])\",\n  \"function getBalance(uint256 accountId) view returns (uint256)\",\n  \"function getPreviousGames(uint256 accountId) view returns ((uint256 gameId, address player1, address player2, uint256 betAmount, address winner, uint256 timestamp)[])\"\n];\n\n//Contract address\nconst address = \"0x5fbdb2315678afecb367f032d93f642f64180aa3\";\n\n//Store the contract instance once gained access to metamask from client\nlet contract = null;\n\nexport async function createAccount(owner) {\n  await getAccess();\n  const owners = document.getElementById(\"owners\").value.split(\",\").filter(n => n);\n  await contract.createAccount(owners).then(() => alert(\"Success\"));\n}\n\nexport async function getAccounts() {\n  await getAccess();\n  console.log(\"Getting accounts\")\n  const result = await contract.getAccounts();\n  document.getElementById(\"accounts\").innerHTML = result;\n}\n\nasync function getAccess() {\n  if (contract) return; // If already initialized, skip\n  \n  // Check if window.ethereum is available\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      // Create a new Web3 provider\n      const tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n      \n      // Request account access\n      await tempProvider.send(\"eth_requestAccounts\", []);\n      \n      // After access is granted, get the signer\n      const signer = tempProvider.getSigner();\n      \n      // Initialize the contract with the signer\n      contract = new ethers.Contract(address, abi, signer);\n      console.log(\"Contract initialized:\", contract);\n    } catch (error) {\n      console.error(\"Error accessing Ethereum accounts:\", error);\n    }\n  } else {\n    console.error(\"Ethereum provider (e.g., MetaMask) not found.\");\n  }\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,YAAY,QAAQ,0BAA0B;AACvD,MAAMC,QAAQ,GAAG,IAAID,YAAY,CAACE,MAAM,CAACC,QAAQ,CAAC;AAClDC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,QAAQ,CAAC;AAExC,MAAMK,GAAG,GAAG,CACV,mFAAmF,EACnF,uEAAuE,EACvE,2GAA2G,EAC3G,qEAAqE,EACrE,+JAA+J,EAC/J,0EAA0E,EAC1E,wDAAwD,EACxD,iDAAiD,EACjD,0CAA0C,EAC1C,6CAA6C,EAC7C,0EAA0E,EAC1E,+DAA+D,EAC/D,wKAAwK,CACzK;;AAED;AACA,MAAMC,OAAO,GAAG,4CAA4C;;AAE5D;AACA,IAAIC,QAAQ,GAAG,IAAI;AAEnB,OAAO,eAAeC,aAAaA,CAACC,KAAK,EAAE;EACzC,MAAMC,SAAS,CAAC,CAAC;EACjB,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC;EAChF,MAAMV,QAAQ,CAACC,aAAa,CAACG,MAAM,CAAC,CAACO,IAAI,CAAC,MAAMC,KAAK,CAAC,SAAS,CAAC,CAAC;AACnE;AAEA,OAAO,eAAeC,WAAWA,CAAA,EAAG;EAClC,MAAMV,SAAS,CAAC,CAAC;EACjBP,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,MAAMiB,MAAM,GAAG,MAAMd,QAAQ,CAACa,WAAW,CAAC,CAAC;EAC3CR,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACS,SAAS,GAAGD,MAAM;AACxD;AAEA,eAAeX,SAASA,CAAA,EAAG;EACzB,IAAIH,QAAQ,EAAE,OAAO,CAAC;;EAEtB;EACA,IAAI,OAAON,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;IAC1C,IAAI;MACF;MACA,MAAMqB,YAAY,GAAG,IAAIzB,MAAM,CAAC0B,SAAS,CAACzB,YAAY,CAACE,MAAM,CAACC,QAAQ,CAAC;;MAEvE;MACA,MAAMqB,YAAY,CAACE,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;;MAElD;MACA,MAAMC,MAAM,GAAGH,YAAY,CAACI,SAAS,CAAC,CAAC;;MAEvC;MACApB,QAAQ,GAAG,IAAIT,MAAM,CAAC8B,QAAQ,CAACtB,OAAO,EAAED,GAAG,EAAEqB,MAAM,CAAC;MACpDvB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,QAAQ,CAAC;IAChD,CAAC,CAAC,OAAOsB,KAAK,EAAE;MACd1B,OAAO,CAAC0B,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC5D;EACF,CAAC,MAAM;IACL1B,OAAO,CAAC0B,KAAK,CAAC,+CAA+C,CAAC;EAChE;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}