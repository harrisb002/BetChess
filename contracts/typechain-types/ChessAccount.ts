/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ChessAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accounts"
      | "createAccount"
      | "getAccountInfo"
      | "getAccounts"
      | "members"
      | "userAccounts"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "accounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAccounts",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userAccounts",
    data: BytesLike
  ): Result;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    accountId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    accountId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    accountId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChessAccount extends BaseContract {
  connect(runner?: ContractRunner | null): ChessAccount;
  waitForDeployment(): Promise<this>;

  interface: ChessAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accounts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        owner: string;
        userName: string;
        balance: bigint;
      }
    ],
    "view"
  >;

  createAccount: TypedContractMethod<[userName: string], [void], "nonpayable">;

  getAccountInfo: TypedContractMethod<
    [accountId: BigNumberish],
    [[string, bigint] & { userName: string; balance: bigint }],
    "view"
  >;

  getAccounts: TypedContractMethod<[], [bigint[]], "view">;

  members: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  userAccounts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        owner: string;
        userName: string;
        balance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAccount"
  ): TypedContractMethod<[userName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAccountInfo"
  ): TypedContractMethod<
    [accountId: BigNumberish],
    [[string, bigint] & { userName: string; balance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccounts"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userAccounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AccountCreated"
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;

  filters: {
    "AccountCreated(address,uint256,uint256)": TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
  };
}
