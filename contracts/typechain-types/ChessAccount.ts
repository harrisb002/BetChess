/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ChessAccount {
  export type AccountStruct = { owner: AddressLike; balance: BigNumberish };

  export type AccountStructOutput = [owner: string, balance: bigint] & {
    owner: string;
    balance: bigint;
  };

  export type GameStruct = {
    gameId: BigNumberish;
    player1: AddressLike;
    player2: AddressLike;
    betAmount: BigNumberish;
    winner: AddressLike;
    timestamp: BigNumberish;
  };

  export type GameStructOutput = [
    gameId: bigint,
    player1: string,
    player2: string,
    betAmount: bigint,
    winner: string,
    timestamp: bigint
  ] & {
    gameId: bigint;
    player1: string;
    player2: string;
    betAmount: bigint;
    winner: string;
    timestamp: bigint;
  };
}

export interface ChessAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountGames"
      | "accounts"
      | "approveBet"
      | "bet"
      | "createAccount"
      | "deposit"
      | "getAccounts"
      | "getBalance"
      | "getPreviousGames"
      | "members"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountCreated"
      | "Deposit"
      | "GameCreated"
      | "GameResult"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountGames",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreviousGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPreviousGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    accountId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    accountId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    accountId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    value: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, value: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    value: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    betAmount: BigNumberish,
    player1: AddressLike,
    player2: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    betAmount: bigint,
    player1: string,
    player2: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    betAmount: bigint;
    player1: string;
    player2: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResultEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winner: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, winner: string, timestamp: bigint];
  export interface OutputObject {
    gameId: bigint;
    winner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChessAccount extends BaseContract {
  connect(runner?: ContractRunner | null): ChessAccount;
  waitForDeployment(): Promise<this>;

  interface: ChessAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountGames: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, string, bigint] & {
        gameId: bigint;
        player1: string;
        player2: string;
        betAmount: bigint;
        winner: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  accounts: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { owner: string; balance: bigint }],
    "view"
  >;

  approveBet: TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  bet: TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createAccount: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[accountId: BigNumberish], [void], "payable">;

  getAccounts: TypedContractMethod<
    [],
    [ChessAccount.AccountStructOutput[]],
    "view"
  >;

  getBalance: TypedContractMethod<[accountId: BigNumberish], [bigint], "view">;

  getPreviousGames: TypedContractMethod<
    [accountId: BigNumberish],
    [ChessAccount.GameStructOutput[]],
    "view"
  >;

  members: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountGames"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, string, bigint] & {
        gameId: bigint;
        player1: string;
        player2: string;
        betAmount: bigint;
        winner: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { owner: string; balance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "approveBet"
  ): TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bet"
  ): TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createAccount"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[accountId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getAccounts"
  ): TypedContractMethod<[], [ChessAccount.AccountStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[accountId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPreviousGames"
  ): TypedContractMethod<
    [accountId: BigNumberish],
    [ChessAccount.GameStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AccountCreated"
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameResult"
  ): TypedContractEvent<
    GameResultEvent.InputTuple,
    GameResultEvent.OutputTuple,
    GameResultEvent.OutputObject
  >;

  filters: {
    "AccountCreated(address,uint256,uint256)": TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "GameCreated(uint256,uint256,address,address,uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameResult(uint256,address,uint256)": TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;
    GameResult: TypedContractEvent<
      GameResultEvent.InputTuple,
      GameResultEvent.OutputTuple,
      GameResultEvent.OutputObject
    >;
  };
}
